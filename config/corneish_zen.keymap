/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

/* urob's timeless Homerow mods */
#include "zmk-helpers/key-labels/36.h"                                      // key-position labels

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs on 36+ keys


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm RGUI SQT>, <&kp SEMI>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL TAB>, <&kp ESC>;
        };

        td2: tap_dance_w {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp UNDER>, <&kp CAPS>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_cword {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&caps_word>;
        };

        combo_vimwq {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&vim_quit>;
        };
    };

    macros {
        vim_quit: vim_quit {
            label = "ZM_vim_quit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESC &kp COLON &kp W &kp Q>;
        };

        change_lang: change_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_ALT)>;
            label = "CHANGE_LANG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E  |  R  |  T  |       |  Y  |  U   |  I  |  O  |  P  | LANG |
            // | PG_UP |  A  |  S  |  D  |  F  |  G  |       |  H  |  J   |  K  |  L  |  ;' | HOME | 
            // | PG_DN |  Z  |  X  |  C  |  V  |  B  |       |  N  |  M   |  ,  |  .  |  /  | END  |
            //                    | TAB | lr1/BKSP | SPC |   | ENT | lr2/DEL  | ALT' |

            bindings = <
&kp ESC    &kp Q       &kp W       &kp E        &kp R         &kp T             &kp Y         &kp U         &kp I           &kp O       &kp P     &change_lang
&kp LPAR  &hml LGUI A &hml LALT S &hmLCTRL D   &hml LSHIFT F &kp G             &kp H         &hmr RSHIFT J  &hmr RCTRL K   &hmr RALT L  &td0      &kp HOME
&td2       &kp Z       &kp X       &kp C        &kp V         &kp B             &kp N         &kp M         &kp COMMA       &kp DOT     &kp FSLH  &kp END
                                   &td1         &lt NUM BSPC  &mt LGUI SPACE    &mt RGUI RET  &lt SYM DEL   &mt RALT GRAVE
            >;
        };

        num_layer {
            display-name = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |      |     | LALT|  UP | RALT| PG_UP |   |  +  |  7  |  8  |  9  | MULT |  |
            // |      |     | LFT | DWN | RGT | PG_DN |   |  -  |  4  |  5  |  6  |  /   |  |
            // |      |     |     |     |     | HOME  |   |  0  |  1  |  2  |  3  |  .   |  |
            //                    |     |     | END   |   |     | lr3 |     |

            bindings = <
&none  &none       &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp PG_UP    &kp PLUS   &kp N7    &kp N8  &kp N9  &kp KP_MULTIPLY  &none
&none  &kp SUPER   &kp LEFT      &kp DOWN  &kp RIGHT      &kp PG_DN    &kp MINUS  &kp N4    &kp N5  &kp N6  &kp SLASH        &none
&none  &kp SUPER2  &none         &none     &kp HOME       &kp END      &kp N0     &kp N1    &kp N2  &kp N3  &kp DOT          &none
                                 &trans    &trans         &trans       &trans     &mo FUNC  &trans
            >;
        };

        sym_layer {
            display-name = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  | MULT|  (  |  )  |      |
            // | CTRL |  '  |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |      |
            // | SHFT |  ~  |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |      |
            //                    |     | lr3 |     |   |     |     |     |

            bindings = <
&none  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &none
&none  &kp GRAVE  &kp TILDE  &none     &none     &none        &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &none
&none  &kp TILDE  &none      &none     &none     &none        &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &none
                             &trans    &mo FUNC  &trans       &trans     &trans     &trans
            >;
        };

        func_layer {
            display-name = "Fn";
            bindings = <
&none            &kp F1          &kp F2        &kp F3        &kp F4      &kp F5              &kp F6        &kp F7        &kp F8        &kp F9   &kp F10  &none
&rgb_ug RGB_OFF  &rgb_ug RGB_ON  &none         &kp C_PREV    &kp C_NEXT  &kp C_PLAY_PAUSE    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &none    &kp F11  &none
&none            &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_NXT  &bt BT_CLR          &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp F12  &none    &sys_reset
                                               &sys_reset    &trans      &bootloader         &bootloader   &trans        &sys_reset
            >;
        };
    };
};
